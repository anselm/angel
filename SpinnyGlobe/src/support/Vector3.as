package support {		public class Vector3 {				public var x:Number;		public var y:Number;		public var z:Number;				// Constructor: accepts x, y and z .  Defaults to [0, 0, 0].		public function Vector3(			_x:Number = 0, _y:Number = 0, _z:Number = 0) {			x = _x;			y = _y;			z = _z;		}				//		// --- Properties ---		//				// get length		public function get length():Number {			return Math.sqrt(x * x + y * y + z * z);		}				// set length		public function set length(newLength:Number):void {			var v:Vector3 = setLength(newLength);			x = v.x;			y = v.y;			z = v.z;		}				// set length in-place		public function setLength(newLength:Number):Vector3 {			return normalize().scale(newLength);		}				//		// --- Transformations ---		//				// add a vector to this vector		public function add(vector:Vector3):Vector3 {			return new Vector3(				x + vector.x,				y + vector.y,				z + vector.z			);		}				// subtract a vector from this vector		public function subtract(vector:Vector3):Vector3 {			return add(vector.scale(-1));		}				// multiply all components of this vector by an amount		public function scale(scalar:Number):Vector3 {			return new Vector3(				x * scalar,				y * scalar,				z * scalar			);		}				// divide all components of this vector by an amount		public function divide(scalar:Number):Vector3 {			return scale(1/scalar);		}				// multiply the components of this vector with another vector		public function multiply(vector:Vector3):Vector3 {			return new Vector3(				x * vector.x,				y * vector.y,				z * vector.z			)		}				// dot product of this vector with another vector		public function dot(vector:Vector3):Number {			var tmp:Vector3 = multiply(vector);			return tmp.x + tmp.y + tmp.z		}				// cross product of this vector with another vector		public function cross(vector:Vector3):Vector3 {			return new Vector3(			  y * vector.z - vector.y * z,			  z * vector.x - vector.z * x,			  x * vector.y - vector.x * y			)		}				// Can be called with arguments:		//   (axisname:String[x,y,z], amount:Number) or (vector:Vector3)		//   vector.rotate('x', 5)		//     #=> rotates this vector around the X axis by 5 radians		//   vector.rotate(new Vector3(10, 20, 30))		//     #=> rotates this vector by another vector		public function rotate(...args):Vector3 {			if (args[0] is Vector3) {				return rotateByVector(args[0]);			} else {				return rotateOnAxis(args[0], args[1]);			}		}				// rotate this vector around the specified axis		public function rotateOnAxis(axis:String,angle:Number):Vector3 {			var vector:Vector3 = new Vector3();						switch (axis) {			case 'x':				vector = new Vector3(					x,					Math.cos(angle)*y - Math.sin(angle)*z,					Math.cos(angle)*z + Math.sin(angle)*y				);				break;							case 'y':				vector = new Vector3(					Math.cos(angle)*x - Math.sin(angle)*z,					y,					Math.cos(angle)*z + Math.sin(angle)*x				);				break;						case 'z':				vector = new Vector3(					Math.cos(angle)*x - Math.sin(angle)*y,					Math.cos(angle)*y + Math.sin(angle)*x,					z				);				break;			}						return vector;		}				// rotate this vector by the amounts specified in another vector		public function rotateByVector(angleVector:Vector3):Vector3 {			var newVector:Vector3 = clone();						// rotation around x axis (a.k.a. pitch)			newVector.y = Math.cos(angleVector.x)*newVector.y					 - Math.sin(angleVector.x)*newVector.z;			newVector.z = Math.sin(angleVector.x)*newVector.y					 + Math.cos(angleVector.x)*newVector.z;						// rotation around y axis (a.k.a. yaw)			newVector.z = Math.cos(angleVector.y)*newVector.z					 - Math.sin(angleVector.y)*newVector.x;			newVector.x = Math.sin(angleVector.y)*newVector.z					 + Math.cos(angleVector.y)*newVector.x;						// rotation around z axis (a.k.a. roll)			newVector.x = Math.cos(angleVector.z)*newVector.x					 - Math.sin(angleVector.z)*newVector.y;			newVector.y = Math.sin(angleVector.z)*newVector.x					 + Math.cos(angleVector.z)*newVector.y;						return newVector;		}				// set the length of this vector to exactly 1		public function normalize():Vector3 {			var length:Number = length;			if (length > 0) {				return divide(length);			} else {				return this			}		}				// This vector will be truncated to max, if length is greater		public function limit(max:Number):Vector3 {			if (length > max) {				return normalize().scale(max);			} else {				return this;			}		}				// apply a function to each component, and return a new vector		//   (new Vector3(1,2,3)).each(function(dim)		//     { return dim * 2 }) //-> <Vector3[2,4,6]>		public function each(func:Function):Vector3 {			return new Vector3(				func.call(this, x),				func.call(this, y),				func.call(this, z)			)		}				//		// --- Measurements ---		//				// get the distance from this vector to another vector		public function distance(vector:Vector3):Number {			return subtract(vector).length;		}				// get the angle between this vector and another vector		public  function angleTo(vector:Vector3):Number {			return Math.acos(dot(vector) /(length * vector.length));		}				//		// --- Utility Methods ---		//				// return a copy of this vector		public function clone():Vector3 {			return new Vector3(x, y, z);			}				// trace this vector and its values		public function inspect():void {			trace('<Vector3['+ x +','+ y +','+ z +']>');		}	}	}